
Fortsetzung von Kommentar im TestBeispiel TabViews
Dies bezieht sich allegmein auf DataFlow im Speziellen jedoch konkret auf das Projekt.

wir erstellen eine neue view (File) für die Featured (?) Objekte (Karten) namens RecipeTabView

Da diese view beim Programmstart zuerst erscheinen soll, ändern wir die Main Struktur WindowGroup {
RecipeTabView(). Dadurch erhält die Funktion RecipeView eine neue Instanz und bei deren Bildung wird der Code dort ausgeführt. (Dies ist generell so und hat mit tabView generell nichts zu tun.)
}
zuerst wird testweise die struc vom testprojekt eingefügt.

dabei wird als zweiter tab die List view genommen (der erste Tab ist die recipetabview)
jetzt kann zwischen listview und feature view (recipetabview) mit dem tabtitem am Fuss gewechselt werden.
!Warum brauchen wir kein State und Binding mehr?


weiter bei zurückgeben des User Inputs and JSON
Lesson 5 Updating the JSON Data

zuerst erweitern wir die ingredients um integers. Der Zweck ist es, dass der User die Anzahl Personen wählen kann und dabei die Zutatenliste angepasst wird.

ingredients hat einen eindeutigen namen (Salz, etc). den Text und optional mehrere Zutaten mit Mengenangaben.
(im Ordner befindet sich eine neue JSON Datei deren Inhalt mit Copy Paste eingefügt wird)

Der Value von jedem Ingredient ist kein String mehr, sondern wird wie Recipe eine neue class. auch diese muss wieder Identifiable (unique) und Decodable (JSON) sein.
dies geschieht im File Recipe mit der Datenstruktur. Nochmals, es können oder können keine Mengenangaben anhalten und sind deshalb optinals. der String ingredients wird zu einem array mit Objekten von der neue class ingredient
zusätzlich wird in Recipe noch der array highlights eingefügt.
die unique ID für den array ingredients wird der bestehenden do schleife für die vergabe der Id im File DataServices eingefügt. die variable bezieht sich auf recipeData, den aus JSON ausgelesenen Datensatz.
Im Prinzip müsste nun die Detailview angepasst werden. Ingredients sind nicht länger Strings, sondern entsprechen der neuen struture ingredients. Der Einfachheit halber wird jedoch mal nur der Name ausgegeben, der Rest folgt später. RecipeDetailView ScrollView VStack Ingredients, Schleife. recipe braucht nicht länger ein UUID, denn der name ist eindeutig

COMPILER FEHLER: unable to type-check RecipeDetailView - body
schaue im Original von CWC nach, denn dort läuft es.
Die Schlafe for each recipe war falsch, betrifft nicht recipe, sondern recipe.ingredients, den array mit den ingredients. (schnell behoben) (weiss nicht was sonst durchlaufen würde - die class?)

Environment
***********

view model:

	tab view - listview - detail view
	tab view - featuredview

Das Programm soll nun um eine neue View 'RecipeFeatureView' ergänzt werden. in RecipeTabView wird der erste Tab vom reinen Text 'Featured View' durch eine Instanz von der neuen view ersetzt.
Das Problem ist nun, dass mehrere views auf dieselbe Instanz des RecipeModel zugreifen sollten. Erzeugt man in den  views eigene Instanzen gibt es ein Datenproblem (unterschiedliche Datensätze). Es gäbe theoretisch unterschiedliche Lösungsansätze, welche jedoch problematisch sind. Instanzen in jeder view beinhalten unterschiedliche daten. Das verschieben in die TabView bedingt, dass Code zum verschieben der Daten in tiefergestellt view benötigt würde. Wir brauchen einen anderen ansatz.

Das geht mit dem neuen EnvironmentObject

die Instanz @ObservableObject model von RecipeModel in der ListView wird entfernt. Dafür erhält die TabView einen modifier environmentObject von RecipeModel. Da RecipeModel observable ist, ist dieses neue Objekt protokollkonform. Das gelöschte observableObject model  wird durch ein Environment Object ersetzt. Dies in der ListView. Detailview  steht direkt unterhalb von listview und hat durch environment zugriff auf model
	Featureview, welches sich in einem andern ast befindet erhält dageben ebenfalls dieses Object.
